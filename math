/*
    Day1:

    minimum number of shovels:
    (numberOfShovels * price % 10 == 0) || (numberOfShovels * price % 10 == coin)

    Important:
    probability of an event = number of ways it can happen / total number of outcomes

    be careful with the overflow
*/


/*
    UVA light, more light
    if n == 10

    he toggle the switch on the 1, 2, 5 and 10 -> the factors of 10

    intialy the bulb is off and if n == 10 we have four factors (even number)

    at factor 1 -> on
    at factor 2 -> off
    at factor 3 -> on
    at factor 4 -> off


    if n == 4

    he toggle the switch on the 1, 2 and 4 -> the factors of 4
    we have 3 factors (odd number)

    at factor 1 -> on
    at factor 2 -> off
    at factor 3 -> on

    so if the numbe of factors of n is even the last bulb is off
    otherwise is on

    so we need to know the factors of n
    the number of factors of any number is even but, if the number is sqrt so the factors of it is odd

    10
    1 * 10
    2 * 5

    4
    1 * 4
    2 * 2
*/

 /*

  if we have a sorted array and we need the max and min distance between element 
  max distance = max(abs(arr[i] - arr[0]), abs(arr[i] - arr[n - 1]))
  min distance = min(abs(arr[i] - arr[i - 1]), abs(arr[i] - arr[i + 1]))

*/

/*
   
    The Idea of Efficient Exponentiation (Power)

    A^p = A^p-1 * A (if p is odd)
    A^p = (A^p/2)^2 (if p is even)

    O(log(p))

*/

/*

  sum of even numbers from 1 to n
  number of even number * (number of even number + 1)

  sum of odd number from 1 to n
  number of odd numbers * pow(number of odd numbers, 2)
*/

/*
  
  Distance between two points: (x0, y0), (x1, y1)

  sqrt(pow((x1 - x0), 2) + pow((y1 - y0), 2))

  time = distance / speed

*/

*/
  
  Interior angle = (180 * (n-2)) / n

  n = 360 / (180 - a)
/*

/*

  if we need to obtain an array where any two neighboring elements would be distinct in a finite time

  1 -> ok

  1 2 -> ok

  1 1 2 -> ok -> 1 2 1

  1 1 1 -> we need 2 numbers between 1 1 1 so -> 1 2 1 2 1
  and so on

  for c numbers we need to have c - 1 numbers between
  if (n >= c + c - 1)
  if (n >= 2*c-1) -> ok
  else -> no

*/

/*
   if we subtract the min form max
   we keep the common factors between them

     30            45
    2*3*5         3*3*5

     30            15
    2*3*5          3*4

     15            15 
    3*5            3*5

   we keep the factors 3*5 = 15 = gcd(30, 45)



   a = bq + r

   gcd(a, b) = gcd(b, a%b)

*/

/*
  we need the number of trailing zero in a factorial of number

  every time we multiply a number with 10 the number of trailing zero increment

  10! = 1 * 2 * 3 * 4 * 5 * 6 * * 7 * 8 * 9 * 10 = 3628800 with two zero
  because we have 2 (10) in this number -> (2 * 5), (10)
  we can divide the numebr by pow(5, i) and i start from 1 and increment it
  we stop when pow(5, i) >= number 

*/

 